name: On Tag pre-release

on:
  push:
    tags:
      - '*.*.*'
      - '*.*.*-rc.*'

jobs:
  version-update:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      branch: ${{ steps.vars.outputs.branch }}
    steps:
      - name: Github checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: 'Get tag value and branch name'
        id: vars
        shell: bash
        run: |
          tag=${GITHUB_REF/refs\/tags\//}
          if [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # remove the leading 'v' from the tag
            tag=${tag:1}
            echo "version=${tag}" >> $GITHUB_OUTPUT
            version=$tag
          elif [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
            # remove the leading 'v' from the tag
            tag=${tag:1}
            echo "version=${tag}" >> $GITHUB_OUTPUT
            version=$tag
          else
            echo "Invalid tag format, we only accept the v*.*.* or v*.*.*-rc.* formats but you set $tag"
            exit 1
          fi
          branch_prefix=tmp-
          echo "branch=${branch_prefix}${version}" >> $GITHUB_OUTPUT

      - name: Run propagate_version.py
        working-directory: ./electron
        run: |
          python3 ./scripts/propagate_version.py --version ${{ steps.vars.outputs.version }}

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b ${{ steps.vars.outputs.branch }}
          git commit -a -m "Bump version to ${{ steps.vars.outputs.version }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ steps.vars.outputs.branch }}
          force: false

  build:
    needs:
      - version-update
    strategy:
      matrix:
        os:
          [
            { name: 'linux', image: 'ubuntu-latest' },
            { name: 'macos-arm64', image: 'macos-latest-xlarge' },
            { name: 'macos-x86', image: 'macos-latest' },
            { name: 'windows', image: 'windows-latest' },
          ]
    runs-on: ${{ matrix.os.image }}
    steps:
      - name: Github checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.version-update.outputs.branch }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Create the certificates for MacOS
        if: matrix.os.name == 'macos-arm64' || matrix.os.name == 'macos-x86'
        env:
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_KEYCHAIN: aiconsole.keychain
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          echo $APPLE_DEVELOPER_ID_APPLICATION_CERT | base64 --decode > electron/DeveloperIdApplication.p12
          echo $APPLE_DEVELOPER_ID_INSTALLER_CERT | base64 --decode > electron/DeveloperIdInstaller.p12
          security create-keychain -p "" $APPLE_KEYCHAIN
          security default-keychain -s $APPLE_KEYCHAIN
          security unlock-keychain -p "" $APPLE_KEYCHAIN
          security import electron/DeveloperIdApplication.p12 -k $APPLE_KEYCHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
          # Causes problems on macos-arm64 security import electron/DeveloperIdInstaller.p12 -k $APPLE_KEYCHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s $APPLE_KEYCHAIN
          security list-keychains -s $APPLE_KEYCHAIN

      - name: Publish app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GITHUB_TOKEN: ${{ secrets.GHA_PAT_PUBLIC }}
        run: |
          cd electron && yarn run tag-publish

  cleanup:
    needs:
      - version-update
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Github checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Delete branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git push origin --delete ${{ needs.version-update.outputs.branch }}
